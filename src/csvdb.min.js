const t=Symbol.iterator,e=Array.isArray;export class CSVDB{#t;#e;get rowCount(){return this.#e.length}get headers(){return this.#t}constructor(t){const[e,...n]=t.trim().split("\n");this.#t=l(e);const r=n.map(l);this.#e=r.map((t=>((t,e)=>{const n={};for(let r=0;r<t.length;r++)n[t[r]]=e[r];return n})(this.#t,t)))}[t](){return this.query()[t]()}query(){return new n(this.#e)}static except(t,e){return new n(function*(t,e){const n=[...e];for(const e of t)h(n,e)&&(n.push(e),yield e)}(t,e))}static intersect(t,e){return new n(function*(t,e){const n=[...e];for(const e of t)h(n,e)||(yield e)}(t,e))}static union(t,e){return CSVDB.unionAll(t,e).distinct()}static unionAll(t,e){return new n(function*(t,e){for(const e of t)yield e;for(const t of e)yield t}(t,e))}}class n{#e;#n=[];#r=[];#s=null;#i=null;#o=null;#l=new Map;#c=1/0;#h=!1;#u=null;constructor(t){this.#e=t}query(){return new n(this)}join(t){return this.#n.push(t),this}joinOn(t,e=(()=>!0)){let n;return this.#n.push((r=>{void 0===n&&(n=[...t]);const s=[];if(r)for(const t of n)e(r,t)&&s.push({...r,...t});return s})),this}where(t){return this.#r.push(t),this}groupBy(t){if("string"==typeof t){const e=t;t=t=>t[e]}return this.#s=t,this}select(t){if(e(t)){this.#i={};for(const e of t)this.#i[e]=e}else this.#i=t;return this}orderBy(t){return this.#o=t,this}fetchFirst(t){return this.#c=t,this}window(t,e){return this.#l.set(t,e),this}distinct(t=!0){return this.#h=t,this}toArray(){return[...this]}getNextRow(){return this.#u||(this.#u=this[t]()),this.#u.next().value}getNextValue(t=0){const e=this.getNextRow();return e?Object.values(e)[t]:void 0}*[t](){if(0===this.#c)return;let t=this.#e;for(const e of this.#n){const n=[];for(const r of t)n.push(...e(r));n.push(...e(null)),t=n}for(const e of this.#r)t=c(t,e);this.#o&&(t=[...t].sort(this.#o));let n=t;const r=this.#l.size>0||this.#i&&Object.values(this.#i).some((t=>"string"==typeof t&&t.endsWith(" OVER ()")||e(t)));this.#s?n=((t,e)=>{const n=new Map;for(const r of t){const t=e(r);n.has(t)||n.set(t,[]),n.get(t)?.push(r)}return[...n.values()]})(t,this.#s):this.#f()?n=[[...t]]:r&&(n=[...t]);const s=[];let i=1;for(const t of n){const o=e(t)?t:r?n:[t],l=e(t)?o[0]:t,c=this.#a(l,this.#i,i,o);if(this.#h){if(!h(s,c))continue;s.push(c)}if(yield c,++i>this.#c)return}}#f(){return!!this.#i&&Object.values(this.#i).some((t=>"string"==typeof t&&o(t)))}#a(t,n,s,o){const l={};if(!n)return t;for(const[c,h]of Object.entries(n)){let n,u,g,p,y,m;const O=/^([A-Z_]+)\(([^)]*)\)(?:\s+OVER\s+([\w\d_]+|\(\)))?$/;if(h instanceof Function){l[c]=h(t,s,o);continue}if(e(h)){const[t,e]=h;if("string"==typeof t){const e=t,n=O.exec(e);if(!n)throw Error("Bad Func: "+e);if(g=n[1],p=n[2].split(","),n[3])throw Error("Unexpected OVER")}else n=t;"string"==typeof e?y=e:m=e}else{const t=O.exec(h);t?(g=t[1],p=t[2].split(","),y=t[3]):u=h}if(y&&(m="()"===y?{}:this.#l.get(y),!m))throw Error("Bad Window: "+y);let E=o;if(m&&(E=r(E,m,t)),n)l[c]=n(t,s,E);else if(g&&p){let e;if("ROW_NUMBER"===g)e=E.indexOf(t)+1;else if(g in f){let t=E.map((t=>t[p[0]]));e=f[g](t)}else if(g in a&&m)i(m,g),e=a[g](t,E,p,m);else if(g in d&&m){i(m,g);let n=E.map((t=>t[p[0]]));e=d[g](t,E,p,n)}else{if(!(g in w))throw Error("Bad Func: "+g);{let t=E.map((t=>t[p[0]]));e=w[g](t)}}l[c]=e}else t&&("*"===h?Object.assign(l,"*"===c?t:Object.fromEntries(Object.entries(t).map((([t,e])=>[`${c}${t}`,e])))):u&&(l[c]=t[u]))}return l}}function r(t,e,n){if(e.partitionBy){const r=e.partitionBy,s="string"==typeof r?t=>t[r]:r,i=s(n);t=t.filter((t=>s(t)===i))}if(e.orderBy){const r=s(e);t=[...t].sort(r);let i=-1/0,o=0;if(e.framing){const t=e.framing[0];if("ROWS"!==t)throw Error("Window unit "+t);const n="CURRENT ROW";"number"==typeof e.framing[1]?i=e.framing[1]:"UNBOUNDED PRECEDING"===e.framing[1]?i=-1/0:e.framing[1]===n&&(i=0),"number"==typeof e.framing[2]?o=e.framing[2]:"UNBOUNDED FOLLOWING"===e.framing[2]?o=1/0:e.framing[2]===n&&(o=0)}const l=t.indexOf(n),c=Math.max(l+i,0),h=l+o+1;t=t.slice(c,h)}return t}function s(t){if("string"==typeof t.orderBy){let e=t.orderBy;return"+"===e[0]?(e=e.substring(1),(t,n)=>+t[e]-+n[e]):(t,n)=>t[e].localeCompare(n[e])}return t.orderBy}function i(t,e){if(!t?.orderBy)throw Error("ORDER BY required: "+e)}const o=t=>"string"==typeof t&&/^[A-Z]+\([^)]*\)$/.test(t);function l(t){const e=[...(t=t.trim()).matchAll(/([^",]*|"[^"]*")(,|$)/g)];return 0===e[e.length-1][0].length&&e.length--,e.map((t=>t[1].trim().replace(/^"|"$/g,"")))}function*c(t,e){let n=0;for(const r of t)e(r,n++)&&(yield r)}function h(t,e){return t.every((t=>!((t,e)=>{const n=Object.keys(t),r=Object.keys(e);return n.length===r.length&&n.every((n=>t[n]===e[n]))})(e,t)))}const u=t=>t.reduce(((t,e)=>t+ +e),0),f={SUM:u,AVG:t=>u(t)/t.length,MAX:t=>Math.max(...t),MIN:t=>Math.min(...t),COUNT:t=>t.length,LISTAGG:t=>t.join(),ARRAY:t=>t,JSON:t=>JSON.stringify(t),ANY:t=>t[0],RANDOM:t=>t[Math.floor(Math.random()*t.length)]},a={RANK:(t,e,n,r)=>{const i=s(r);let o=e.indexOf(t);for(;o>=0&&0===i(e[o],t);o--);return o+2},DENSE_RANK:(t,e,n,r)=>{const i=s(r),o=e.indexOf(t);let l=0;for(let t=1;t<=o;t++)0===i(e[t-1],e[t])&&l++;return o-l+1},NTILE:(t,e,n,r)=>{const s=e.indexOf(t);return Math.floor(+n[0]*s/e.length)+1},PERCENT_RANK:(t,e,n,r)=>{if(1===e.length)return 0;const i=s(r);let o=e.indexOf(t);for(;o>=0&&0===i(e[o],t);o--);return(o+1)/(e.length-1)},CUME_DIST:(t,e,n,r)=>{const i=s(r);let o=e.indexOf(t)+1;for(;o<e.length&&0===i(e[o],t);o++);return o/e.length},PERCENTILE_DIST:(t,e,n,r)=>{const s=g(e,+n[0],r);if(s){const[t,n]=s;return e[t][n]}return null},PERCENTILE_CONT:(t,e,n,r)=>{const s=g(e,+n[0],r);if(s){const[t,n,r]=s,i=+e[t-1][n];return r*(+e[t][n]-i)+i}return null}};function g(t,e,n){if("string"!=typeof n?.orderBy)throw Error("ORDER BY must be string");let r=n.orderBy;"+"===r[0]&&(r=r.substring(1));let s=0;for(let n=0;n<t.length;n++){let i=n+1;for(;i<t.length&&t[n][r]===t[i][r];i++);const o=i/t.length;if(o>=e)return[n,r,(e-s)/(o-s)];s=o}return null}const d={LEAD:(t,e,n,r)=>{const s=e.indexOf(t);let i=1;return n.length>1&&(i=+n[1]),r[s+i]||null},LAG:(t,e,n,r)=>{let s=1;return n.length>1&&(s=+n[1]),r[e.indexOf(t)-s]||null},FIRST_VALUE:(t,e,n,r)=>r[0],LAST_VALUE:(t,e,n,r)=>r[r.length-1],NTH_VALUE:(t,e,n,r)=>r[+n[1]-1]||null},p=t=>{const e=t.length,n=u(t)/e,r=t.reduce(((t,e)=>t+Math.pow(+e-n,2)),0);return Math.sqrt(r/e)},w={STDDEV_POP:t=>Math.sqrt(p(t)/t.length),STDDEV_SAMP:t=>Math.sqrt(p(t)/(t.length-1)),VAR_POP:t=>p(t)/t.length,VAR_SAMP:t=>p(t)/(t.length-1)};